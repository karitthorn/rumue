#import "@preview/charged-ieee:0.1.4": ieee
#set page(paper: "a4")
#show page: set text(font: "TH sarabun new")
#show: ieee.with(
  title: text(font: "TH sarabun new")[การออกแบบระบบกำจัดสัญญาณรบกวนด้วยเทคนิคการแปลงในงาน\ ประมวลผลสัญญาณ],
  // abstract: text(font: "TH sarabun new")[
  //   ทดสอบ สสวสาดาสหำดาสวหวดาสหสวดาสว
  // ],
  authors: (
    (
      name: "คริษฐ์ธร บำรุงพิพัฒนพร",
      department: text(font: "TH sarabun new")[6610501998],
      organization: text(font: "TH sarabun new")[วิศวะคอมพิวเตอร์],
      location: text(font: "TH sarabun new")[มหาลัยเกษตรศาสตร์ บางเขน],
      email: "karitthorn.b@ku.th",
    ),

  ),
  // index-terms: ("Scientific writing", "Typesetting", "Document creation", "Syntax"),
  // bibliography: bibliography("refs.bib"),
  figure-supplement: [Fig.],
)

// Apply font settings after IEEE template to override its defaults
#set text(font: "TH sarabun new", size: 11pt)
#set par(justify: false, leading: 0.65em)
#show figure.caption: set align(center)

// Force font for all text including template sections

#set align(center)
= บทนำ

โครงงานนี้จัดทำขึ้นในรายวิชา เทคนิคการแปลงในการประมวลผลสัญญาณ (Transform Techniques in Signal Processing) โดยมีเป้าหมายเพื่อพัฒนาโปรแกรมที่สามารถตรวจจับและกำจัดสัญญาณรบกวนในโดเมนความถี่ออกจาก\ สัญญาณเสียงที่ได้รับ ซึ่งในแต่ละกรณีจะมีลักษณะของความถี่รบกวนและช่วง\ เวลาที่เกิดการรบกวนแตกต่างกันไป
#set align(left)
= แนวทางการแก้ไขปัญหา

ขั้นตอนการตัดสัญญาณรบกวนประกอบด้วยห้าส่วนหลักดังนี้:

+ *การอ่านไฟล์เสียง:* อ่านไฟล์เสียง exercise_6.wav ด้วยไลบรารี soundfile แล้วบังคับให้ข้อมูลอยู่ในรูปแบบ float64 เพื่อให้กระบวนการประมวลผลมีความสม่ำเสมอ หากไฟล์มีหลายแชนเนลจะเฉลี่ยให้เหลือโมโน จากนั้นคำนวณค่า sample rate ระยะเวลารวม และค่าสูงสุด/ต่ำสุดของสัญญาณไว้เป็นตัวชี้วัดก่อนการกรอง

+ *การวิเคราะห์ความถี่:* วิเคราะห์ความถี่หลักด้วยการทำ FFT แล้วเลือกเฉพาะสเปกตรัมด้านบวกเพื่อเลี่ยงความซ้ำซ้อน นำค่าความดังมาแปลงเป็น Frequency Spectrum ก่อนใช้ scipy.signal.find_peaks ใต้ยอดสูงสุด โดยแสดงภาพรวมของสเปกตรัมทั้งช่วงในรูป จะพบว่าจะมี noise ที่ 1975.5 Hz กับ 4143.5 Hz เเละจะเเสดงสเปกตรัมซูมที่ 1976.0  เเละ 4143 Hz ในรูป และ  ตามลำดับ 
  #figure(
    image("figures/frequency_spectrum_analysis.png", width: 8cm),
    caption: align(center)[การเเสดงสเปกตรัมรวมเพื่อหา Magnitude Peaks ในสัญญาณต้นฉบับ.],
  ) <fig:spectrum-overview>




  \ 

+ *การสร้างฟังก์ชันกรอง:* สร้างฟังก์ชัน apply_time_limited_notch เพื่อออกแบบ notch filter แบบ IIR ที่ใช้กรองเฉพาะช่วงเวลาที่กำหนด โดยคำนวณดัชนีเริ่มและสิ้นสุดจากวินาทีที่กำหนดกับค่า sample rate แล้วใช้ scipy.signal.filtfilt กรองไป-กลับเพื่อลดการบิดเบือนเฟส

+ *การประยุกต์ใช้ฟิลเตอร์:* ใช้ฟังก์ชันดังกล่าวกับสำเนาของสัญญาณเดิม 3 ครั้ง ได้แก่:
  - กรองความถี่ 1975.5 Hz ช่วง 0–5 วินาที แบนด์วิดท์ 150 Hz เพื่อลดฮัมช่วงต้น
  - กรองความถี่เดียวกันช่วง 3–5.5 วินาที ด้วยแบนด์วิดท์ 1000 Hz เพื่อลดฮัมที่กระจายกว้าง
  - กรองความถี่ 4143.5 Hz ช่วง 0–15 วินาที แบนด์วิดท์ 80 Hz เพื่อจัดการฮัมลำดับสอง

+ *การประเมินผล:* ประเมินผลหลังกรองด้วยการเปรียบเทียบสเปกโตรแกรมก่อนและหลัง ซึ่งสรุปไว้ในรูป เพื่อยืนยันว่าพลังงานในย่านรบกวนลดลงตลอดช่วงเวลาที่สนใจ เเละ เเสดงภาพการซูมสเปกตรัมในรูป และ 




\
เพื่อให้เห็นภาพรวมของกระบวนการทั้งหมดอย่างชัดเจน สามารถดูแผนภาพสายงานในรูป แสดงลำดับขั้นจากการเตรียมข้อมูลจนถึงการประเมินผลหลังการกรอง




== เครื่องมือและเหตุผล

ไลบรารีหลักที่ใช้คือ numpy สำหรับจัดการข้อมูลสัญญาณ soundfile สำหรับอ่านและเขียนไฟล์เสียง scipy.signal สำหรับออกแบบฟิลเตอร์และวิเคราะห์ความถี่ matplotlib สำหรับสร้างกราฟ และ IPython.display.Audio สำหรับพรีวิวเสียง

การจำกัดช่วงเวลาของ notch filter ทำให้สัญญาณหลักในย่านเดียวกันยังคงรายละเอียด ขณะที่ filtfilt ป้องกันการหน่วงเฟส การทดลองปรับค่าแบนด์วิดท์และช่วงเวลาช่วยให้ลดเสียงรบกวนโดยไม่ทำลายข้อมูลสำคัญ

= สรุปผลการทดลอง

ผลการทดลองแสดงให้เห็นว่า notch filter ที่จำกัดช่วงเวลาและความกว้างแบนด์สามารถกำจัดสัญญาณรบกวนที่ 1975.5 Hz และ 4143.5 Hz ได้อย่างมีประสิทธิภาพ โดยพลังงานย่านรบกวนลดลงชัดเจนในสเปกตรัมและสเปกโตรแกรม ขณะที่สัญญาณหลักยังคงรายละเอียดสำคัญ โดยค่า MAE ของสัญญาณทั้งหมดคือ 0.012739
